// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "linux-musl-openssl-3.0.x"]
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MANAGER
  USER
  STUDENT
  TEACHER
}

enum AccountType {
  SILVER
  GOLD
  DIAMOND
  PRO
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                         String        @id @default(uuid())
  email                      String        @unique
  password                   String?
  phoneNumber                String?
  name                       String
  avatar                     String?
  about                      String?
  role                       Role          @default(USER)
  lastLogin                  DateTime      @default(now())
  isVerified                 Boolean       @default(false)
  resetPasswordToken         String?
  resetPasswordExpiresAt     DateTime?
  verificationToken          String?
  verificationTokenExpiresAt DateTime?
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @updatedAt
  transactions               Transaction[]

  // One-to-One Relation with Student (Only if the user is a student)
  student Student?
}

model Student {
  id                        String      @id @default(uuid())
  userId                    String      @unique
  user                      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  age                       Int
  gender                    Gender?
  contactInfo               String?
  backgroundSummary         String?
  initialAssessment         String?
  aptitudesAndStrengths     String?
  shortTermGoals            String?
  longTermObjectives        String?
  workshopsAttended         String?
  resourcesUtilized         String?
  skillsDevelopment         String?
  behavioralChanges         String?
  feedbackAndSelfReflection String?
  obstaclesEncountered      String?
  interventionsProvided     String?
  accountType               AccountType @default(SILVER)
  createdAt                 DateTime    @default(now())
  updatedAt                 DateTime    @updatedAt
}

model Category {
  id      String   @id @default(uuid())
  name    String
  courses Course[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id               String   @id @default(uuid())
  userId           String
  teacherName      String
  title            String
  description      String?
  imageUrl         String?
  price            Float?
  isPublished      Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  enrollmentsCount Int      @default(0)

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  attachments  Attachment[]
  chapters     Chapter[]
  transactions Transaction[]

  @@index([categoryId])
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String?
  videoUrl    String?
  content     String?
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)
  courseId    String
  course      Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Transaction {
  id              String   @id @default(uuid())
  userId          String?
  transactionId   String
  dateTime        DateTime
  courseId        String?
  paymentProvider String
  amount          Float?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course?  @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@index([courseId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Gallery {
  id        String   @id @default(uuid())
  caption   String
  imageUrls String[] // Updated to be an array of strings
  date      DateTime // Start date of the event
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
